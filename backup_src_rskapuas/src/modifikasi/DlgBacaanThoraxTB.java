package modifikasi;
import simrskhanza.*;
import fungsi.WarnaTable;
import fungsi.batasInput;
import fungsi.koneksiDB;
import fungsi.sekuel;
import fungsi.validasi;
import fungsi.akses;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.event.DocumentEvent;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

public class DlgBacaanThoraxTB extends javax.swing.JDialog {
    private final DefaultTableModel tabMode;
    private sekuel Sequel=new sekuel();
    private validasi Valid=new validasi();
    private Connection koneksi=koneksiDB.condb();
    private PreparedStatement ps;
    private ResultSet rs;
    private int i;
    private String tulang="",trakea="",mediastinum="",jantung="",diafragma="",status="";

    /** Creates new form DlgProgramStudi
     * @param parent
     * @param modal */
    public DlgBacaanThoraxTB(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        Object[] row={"No. Rawat","No.MR","Nama Pasien","Umur","Jns. Kelamin","Tgl Kunjungan","Posisi","KV","Inspirasi","Simetris","Tulang & Jaringan Lunak","Trakea","Mediastinum","Jantung","Diafragma","Sudut Costophrenicus","Parenkim Paru","Kesan","Status Pasien"};
        tabMode=new DefaultTableModel(null,row){
              @Override public boolean isCellEditable(int rowIndex, int colIndex){return false;}
        };
        tbDokter.setModel(tabMode);

        tbDokter.setPreferredScrollableViewportSize(new Dimension(800,800));
        tbDokter.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

        for (i = 0; i < 19; i++) {
            TableColumn column = tbDokter.getColumnModel().getColumn(i);
            if(i==0){
                column.setPreferredWidth(70);
            }else if(i==1){
                column.setPreferredWidth(70);
            }else if(i==2){
                column.setPreferredWidth(150);
            }else if(i==3){
                column.setPreferredWidth(50);
            }else if(i==4){
                column.setPreferredWidth(50);
            }else if(i==5){
                column.setPreferredWidth(70);
            }else if(i==6){
                column.setPreferredWidth(80);
            }else if(i==7){
                column.setPreferredWidth(80);
            }else if(i==8){
                column.setPreferredWidth(80);
            }else if(i==9){
                column.setPreferredWidth(80);
            }else if(i==10){
                column.setPreferredWidth(130);
            }else if(i==11){
                column.setPreferredWidth(130);
            }else if(i==12){
                column.setPreferredWidth(130);
            }else if(i==13){
                column.setPreferredWidth(130);
            }else if(i==14){
               column.setPreferredWidth(130);
            }else if(i==15){
                column.setPreferredWidth(130);
            }else if(i==16){
                column.setPreferredWidth(130);
            }else if(i==17){
                column.setPreferredWidth(250);
            }else if(i==18){
                column.setPreferredWidth(70);
            }
        }
        tbDokter.setDefaultRenderer(Object.class, new WarnaTable());

        TCari.setDocument(new batasInput((byte)100).getKata(TCari));
        Kesimpulan.setDocument(new batasInput((int)200).getKata(Kesimpulan));
        if(koneksiDB.CARICEPAT().equals("aktif")){
            TCari.getDocument().addDocumentListener(new javax.swing.event.DocumentListener(){
                @Override
                public void insertUpdate(DocumentEvent e) {
                    if(TCari.getText().length()>2){
                        tampil();
                    }
                }
                @Override
                public void removeUpdate(DocumentEvent e) {
                    if(TCari.getText().length()>2){
                        tampil();
                    }
                }
                @Override
                public void changedUpdate(DocumentEvent e) {
                    if(TCari.getText().length()>2){
                        tampil();
                    }
                }
            });
        }   
        ChkInput.setSelected(true);
        isForm(); 
        tampil();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        TNoRm = new widget.TextBox();
        label42 = new widget.Label();
        internalFrame1 = new widget.InternalFrame();
        jPanel2 = new javax.swing.JPanel();
        panelisi2 = new widget.panelisi();
        DTPCari1 = new widget.Tanggal();
        label11 = new widget.Label();
        DTPCari2 = new widget.Tanggal();
        label9 = new widget.Label();
        TCari = new widget.TextBox();
        BtnCari = new widget.Button();
        label10 = new widget.Label();
        LCount = new widget.Label();
        panelisi1 = new widget.panelisi();
        BtnSimpan = new widget.Button();
        BtnBatal = new widget.Button();
        BtnPrint = new widget.Button();
        BtnHapus = new widget.Button();
        BtnKeluar = new widget.Button();
        scrollPane1 = new widget.ScrollPane();
        tbDokter = new widget.Table();
        PanelInput = new javax.swing.JPanel();
        FormInput = new widget.PanelBiasa();
        label12 = new widget.Label();
        label18 = new widget.Label();
        label26 = new widget.Label();
        LnTulang = new widget.TextBox();
        label31 = new widget.Label();
        ChkNormalTulang = new widget.CekBox();
        ChklnTulang = new widget.CekBox();
        label19 = new widget.Label();
        label22 = new widget.Label();
        label27 = new widget.Label();
        ChkNormalTrakea = new widget.CekBox();
        ChkMeyempitTrakea = new widget.CekBox();
        label30 = new widget.Label();
        label32 = new widget.Label();
        CmbPosisi = new widget.ComboBox();
        label36 = new widget.Label();
        label38 = new widget.Label();
        label40 = new widget.Label();
        TNoRw = new widget.TextBox();
        TPasien = new widget.TextBox();
        label41 = new widget.Label();
        DTPTanggal = new widget.Tanggal();
        scrollPane17 = new widget.ScrollPane();
        Kesimpulan = new widget.TextArea();
        CmbKV = new widget.ComboBox();
        CmbInspirasi = new widget.ComboBox();
        CmbSudut = new widget.ComboBox();
        label46 = new widget.Label();
        label24 = new widget.Label();
        ChklnShiftoTrakea = new widget.CekBox();
        ShiftoTrakea = new widget.TextBox();
        ChklnShiftoMediastinum = new widget.CekBox();
        label33 = new widget.Label();
        ChkNormalMediastinum = new widget.CekBox();
        label34 = new widget.Label();
        ChkMelebarMediastinum = new widget.CekBox();
        label25 = new widget.Label();
        ShiftoMediastinum = new widget.TextBox();
        label35 = new widget.Label();
        ChkMassaMediastinum = new widget.CekBox();
        label37 = new widget.Label();
        ChkNormalJantung = new widget.CekBox();
        label39 = new widget.Label();
        ChkCardiomegalyJantung = new widget.CekBox();
        label43 = new widget.Label();
        ChkTeardropJantung = new widget.CekBox();
        label28 = new widget.Label();
        ChklnShiftoJantung = new widget.CekBox();
        ShiftoJantung = new widget.TextBox();
        label44 = new widget.Label();
        ChkNormalDiafragma = new widget.CekBox();
        label47 = new widget.Label();
        ChkMendatarDiafragma = new widget.CekBox();
        label48 = new widget.Label();
        ChkTentingDiafragma = new widget.CekBox();
        label29 = new widget.Label();
        ChklnDiafragma = new widget.CekBox();
        LainnyaDiagfragma = new widget.TextBox();
        label49 = new widget.Label();
        CmbSimetris1 = new widget.ComboBox();
        label45 = new widget.Label();
        CmbParenkin = new widget.ComboBox();
        label50 = new widget.Label();
        ChkInput = new widget.CekBox();

        TNoRm.setEditable(false);
        TNoRm.setHighlighter(null);
        TNoRm.setName("TNoRm"); // NOI18N
        TNoRm.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TNoRmKeyPressed(evt);
            }
        });

        label42.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        label42.setText("Minggu");
        label42.setName("label42"); // NOI18N
        label42.setPreferredSize(new java.awt.Dimension(65, 23));

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        internalFrame1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(240, 245, 235)), "::[ Data Pemeriksaan Obsetri ]::", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(50, 50, 50))); // NOI18N
        internalFrame1.setName("internalFrame1"); // NOI18N
        internalFrame1.setLayout(new java.awt.BorderLayout(1, 1));

        jPanel2.setName("jPanel2"); // NOI18N
        jPanel2.setOpaque(false);
        jPanel2.setPreferredSize(new java.awt.Dimension(816, 100));
        jPanel2.setLayout(new java.awt.BorderLayout(1, 1));

        panelisi2.setBackground(new java.awt.Color(255, 150, 255));
        panelisi2.setName("panelisi2"); // NOI18N
        panelisi2.setPreferredSize(new java.awt.Dimension(100, 44));
        panelisi2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 4, 9));

        DTPCari1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "30-07-2024" }));
        DTPCari1.setDisplayFormat("dd-MM-yyyy");
        DTPCari1.setName("DTPCari1"); // NOI18N
        DTPCari1.setOpaque(false);
        DTPCari1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                DTPCari1ItemStateChanged(evt);
            }
        });
        DTPCari1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                DTPCari1KeyPressed(evt);
            }
        });
        panelisi2.add(DTPCari1);

        label11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label11.setText("s.d");
        label11.setName("label11"); // NOI18N
        label11.setPreferredSize(new java.awt.Dimension(50, 23));
        panelisi2.add(label11);

        DTPCari2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "30-07-2024" }));
        DTPCari2.setDisplayFormat("dd-MM-yyyy");
        DTPCari2.setName("DTPCari2"); // NOI18N
        DTPCari2.setOpaque(false);
        DTPCari2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                DTPCari2ItemStateChanged(evt);
            }
        });
        DTPCari2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                DTPCari2KeyPressed(evt);
            }
        });
        panelisi2.add(DTPCari2);

        label9.setText("Key Word :");
        label9.setName("label9"); // NOI18N
        label9.setPreferredSize(new java.awt.Dimension(70, 23));
        panelisi2.add(label9);

        TCari.setName("TCari"); // NOI18N
        TCari.setPreferredSize(new java.awt.Dimension(400, 23));
        TCari.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TCariKeyPressed(evt);
            }
        });
        panelisi2.add(TCari);

        BtnCari.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/accept.png"))); // NOI18N
        BtnCari.setMnemonic('1');
        BtnCari.setToolTipText("Alt+1");
        BtnCari.setName("BtnCari"); // NOI18N
        BtnCari.setPreferredSize(new java.awt.Dimension(28, 23));
        BtnCari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnCariActionPerformed(evt);
            }
        });
        BtnCari.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BtnCariKeyPressed(evt);
            }
        });
        panelisi2.add(BtnCari);

        label10.setText("Record :");
        label10.setName("label10"); // NOI18N
        label10.setPreferredSize(new java.awt.Dimension(70, 23));
        panelisi2.add(label10);

        LCount.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        LCount.setText("0");
        LCount.setName("LCount"); // NOI18N
        LCount.setPreferredSize(new java.awt.Dimension(60, 23));
        panelisi2.add(LCount);

        jPanel2.add(panelisi2, java.awt.BorderLayout.PAGE_START);

        panelisi1.setName("panelisi1"); // NOI18N
        panelisi1.setPreferredSize(new java.awt.Dimension(100, 44));
        panelisi1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 9));

        BtnSimpan.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/save-16x16i.png"))); // NOI18N
        BtnSimpan.setMnemonic('S');
        BtnSimpan.setText("Simpan");
        BtnSimpan.setToolTipText("Alt+S");
        BtnSimpan.setName("BtnSimpan"); // NOI18N
        BtnSimpan.setPreferredSize(new java.awt.Dimension(100, 30));
        BtnSimpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnSimpanActionPerformed(evt);
            }
        });
        BtnSimpan.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BtnSimpanKeyPressed(evt);
            }
        });
        panelisi1.add(BtnSimpan);

        BtnBatal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/Edit.png"))); // NOI18N
        BtnBatal.setMnemonic('B');
        BtnBatal.setText("Ganti");
        BtnBatal.setToolTipText("Alt+B");
        BtnBatal.setName("BtnBatal"); // NOI18N
        BtnBatal.setPreferredSize(new java.awt.Dimension(100, 30));
        BtnBatal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnBatalActionPerformed(evt);
            }
        });
        BtnBatal.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BtnBatalKeyPressed(evt);
            }
        });
        panelisi1.add(BtnBatal);

        BtnPrint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/b_print.png"))); // NOI18N
        BtnPrint.setMnemonic('T');
        BtnPrint.setText("Cetak");
        BtnPrint.setToolTipText("Alt+T");
        BtnPrint.setName("BtnPrint"); // NOI18N
        BtnPrint.setPreferredSize(new java.awt.Dimension(100, 30));
        BtnPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnPrintActionPerformed(evt);
            }
        });
        BtnPrint.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BtnPrintKeyPressed(evt);
            }
        });
        panelisi1.add(BtnPrint);

        BtnHapus.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/stop_f2.png"))); // NOI18N
        BtnHapus.setMnemonic('H');
        BtnHapus.setText("Hapus");
        BtnHapus.setToolTipText("Alt+H");
        BtnHapus.setName("BtnHapus"); // NOI18N
        BtnHapus.setPreferredSize(new java.awt.Dimension(100, 30));
        BtnHapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnHapusActionPerformed(evt);
            }
        });
        BtnHapus.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BtnHapusKeyPressed(evt);
            }
        });
        panelisi1.add(BtnHapus);

        BtnKeluar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/exit.png"))); // NOI18N
        BtnKeluar.setMnemonic('K');
        BtnKeluar.setText("Keluar");
        BtnKeluar.setToolTipText("Alt+K");
        BtnKeluar.setName("BtnKeluar"); // NOI18N
        BtnKeluar.setPreferredSize(new java.awt.Dimension(100, 30));
        BtnKeluar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnKeluarActionPerformed(evt);
            }
        });
        BtnKeluar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BtnKeluarKeyPressed(evt);
            }
        });
        panelisi1.add(BtnKeluar);

        jPanel2.add(panelisi1, java.awt.BorderLayout.CENTER);

        internalFrame1.add(jPanel2, java.awt.BorderLayout.PAGE_END);

        scrollPane1.setName("scrollPane1"); // NOI18N
        scrollPane1.setOpaque(true);

        tbDokter.setAutoCreateRowSorter(true);
        tbDokter.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tbDokter.setToolTipText("Silahkan klik untuk memilih data yang mau diedit ataupun dihapus");
        tbDokter.setName("tbDokter"); // NOI18N
        tbDokter.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbDokterMouseClicked(evt);
            }
        });
        tbDokter.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tbDokterKeyPressed(evt);
            }
        });
        scrollPane1.setViewportView(tbDokter);

        internalFrame1.add(scrollPane1, java.awt.BorderLayout.CENTER);

        PanelInput.setName("PanelInput"); // NOI18N
        PanelInput.setOpaque(false);
        PanelInput.setPreferredSize(new java.awt.Dimension(660, 220));
        PanelInput.setLayout(new java.awt.BorderLayout(1, 1));

        FormInput.setName("FormInput"); // NOI18N
        FormInput.setPreferredSize(new java.awt.Dimension(660, 107));
        FormInput.setLayout(null);

        label12.setText("Posisi :");
        label12.setName("label12"); // NOI18N
        label12.setPreferredSize(new java.awt.Dimension(75, 23));
        FormInput.add(label12);
        label12.setBounds(20, 10, 105, 23);

        label18.setText("Normal");
        label18.setName("label18"); // NOI18N
        label18.setPreferredSize(new java.awt.Dimension(75, 23));
        FormInput.add(label18);
        label18.setBounds(130, 170, 40, 23);

        label26.setText("Simetris :");
        label26.setName("label26"); // NOI18N
        label26.setPreferredSize(new java.awt.Dimension(65, 23));
        FormInput.add(label26);
        label26.setBounds(10, 130, 120, 23);

        LnTulang.setEditable(false);
        LnTulang.setName("LnTulang"); // NOI18N
        LnTulang.setPreferredSize(new java.awt.Dimension(207, 23));
        LnTulang.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                LnTulangMouseMoved(evt);
            }
        });
        LnTulang.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                LnTulangMouseExited(evt);
            }
        });
        LnTulang.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                LnTulangKeyPressed(evt);
            }
        });
        FormInput.add(LnTulang);
        LnTulang.setBounds(300, 170, 190, 23);

        label31.setText("KV :");
        label31.setName("label31"); // NOI18N
        label31.setPreferredSize(new java.awt.Dimension(75, 23));
        FormInput.add(label31);
        label31.setBounds(60, 50, 70, 23);

        ChkNormalTulang.setBorder(null);
        ChkNormalTulang.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        ChkNormalTulang.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ChkNormalTulang.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ChkNormalTulang.setName("ChkNormalTulang"); // NOI18N
        ChkNormalTulang.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ChkNormalTulangItemStateChanged(evt);
            }
        });
        FormInput.add(ChkNormalTulang);
        ChkNormalTulang.setBounds(180, 170, 28, 23);

        ChklnTulang.setBorder(null);
        ChklnTulang.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        ChklnTulang.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ChklnTulang.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ChklnTulang.setName("ChklnTulang"); // NOI18N
        ChklnTulang.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ChklnTulangItemStateChanged(evt);
            }
        });
        FormInput.add(ChklnTulang);
        ChklnTulang.setBounds(270, 170, 28, 23);

        label19.setText("Lainnya");
        label19.setName("label19"); // NOI18N
        label19.setPreferredSize(new java.awt.Dimension(75, 23));
        FormInput.add(label19);
        label19.setBounds(210, 170, 60, 23);

        label22.setText("Diafagma :");
        label22.setName("label22"); // NOI18N
        label22.setPreferredSize(new java.awt.Dimension(75, 23));
        FormInput.add(label22);
        label22.setBounds(260, 130, 70, 23);

        label27.setText("Nomal");
        label27.setName("label27"); // NOI18N
        label27.setPreferredSize(new java.awt.Dimension(75, 23));
        FormInput.add(label27);
        label27.setBounds(330, 10, 40, 23);

        ChkNormalTrakea.setBorder(null);
        ChkNormalTrakea.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        ChkNormalTrakea.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ChkNormalTrakea.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ChkNormalTrakea.setName("ChkNormalTrakea"); // NOI18N
        ChkNormalTrakea.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ChkNormalTrakeaItemStateChanged(evt);
            }
        });
        ChkNormalTrakea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChkNormalTrakeaActionPerformed(evt);
            }
        });
        FormInput.add(ChkNormalTrakea);
        ChkNormalTrakea.setBounds(370, 10, 28, 23);

        ChkMeyempitTrakea.setBorder(null);
        ChkMeyempitTrakea.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        ChkMeyempitTrakea.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ChkMeyempitTrakea.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ChkMeyempitTrakea.setName("ChkMeyempitTrakea"); // NOI18N
        ChkMeyempitTrakea.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ChkMeyempitTrakeaItemStateChanged(evt);
            }
        });
        ChkMeyempitTrakea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChkMeyempitTrakeaActionPerformed(evt);
            }
        });
        FormInput.add(ChkMeyempitTrakea);
        ChkMeyempitTrakea.setBounds(460, 10, 28, 23);

        label30.setText("Menyempit");
        label30.setName("label30"); // NOI18N
        label30.setPreferredSize(new java.awt.Dimension(75, 23));
        FormInput.add(label30);
        label30.setBounds(400, 10, 60, 23);

        label32.setText("Inspirasi :");
        label32.setName("label32"); // NOI18N
        label32.setPreferredSize(new java.awt.Dimension(65, 23));
        FormInput.add(label32);
        label32.setBounds(40, 90, 90, 23);

        CmbPosisi.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "AP", "PA", "Lateral" }));
        CmbPosisi.setName("CmbPosisi"); // NOI18N
        CmbPosisi.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                CmbPosisiKeyPressed(evt);
            }
        });
        FormInput.add(CmbPosisi);
        CmbPosisi.setBounds(130, 10, 90, 23);

        label36.setText("Pasien :");
        label36.setName("label36"); // NOI18N
        label36.setPreferredSize(new java.awt.Dimension(65, 23));
        FormInput.add(label36);
        label36.setBounds(510, 170, 90, 23);

        label38.setText("Mediastinum :");
        label38.setName("label38"); // NOI18N
        label38.setPreferredSize(new java.awt.Dimension(65, 23));
        FormInput.add(label38);
        label38.setBounds(240, 50, 90, 23);

        label40.setText("Sudut Costophrenicus :");
        label40.setName("label40"); // NOI18N
        label40.setPreferredSize(new java.awt.Dimension(65, 23));
        FormInput.add(label40);
        label40.setBounds(830, 10, 120, 23);

        TNoRw.setEditable(false);
        TNoRw.setHighlighter(null);
        TNoRw.setName("TNoRw"); // NOI18N
        TNoRw.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TNoRwKeyPressed(evt);
            }
        });
        FormInput.add(TNoRw);
        TNoRw.setBounds(600, 170, 120, 23);

        TPasien.setEditable(false);
        TPasien.setHighlighter(null);
        TPasien.setName("TPasien"); // NOI18N
        FormInput.add(TPasien);
        TPasien.setBounds(720, 170, 220, 23);

        label41.setText("Trakea :");
        label41.setName("label41"); // NOI18N
        label41.setPreferredSize(new java.awt.Dimension(65, 23));
        FormInput.add(label41);
        label41.setBounds(260, 10, 70, 23);

        DTPTanggal.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "30-07-2024" }));
        DTPTanggal.setDisplayFormat("dd-MM-yyyy");
        DTPTanggal.setName("DTPTanggal"); // NOI18N
        DTPTanggal.setOpaque(false);
        DTPTanggal.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                DTPTanggalItemStateChanged(evt);
            }
        });
        DTPTanggal.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                DTPTanggalKeyPressed(evt);
            }
        });
        FormInput.add(DTPTanggal);
        DTPTanggal.setBounds(940, 170, 100, 23);

        scrollPane17.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        scrollPane17.setName("scrollPane17"); // NOI18N

        Kesimpulan.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        Kesimpulan.setColumns(20);
        Kesimpulan.setRows(5);
        Kesimpulan.setName("Kesimpulan"); // NOI18N
        Kesimpulan.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                KesimpulanKeyPressed(evt);
            }
        });
        scrollPane17.setViewportView(Kesimpulan);

        FormInput.add(scrollPane17);
        scrollPane17.setBounds(840, 100, 320, 50);

        CmbKV.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Cukup", "Over", "Low" }));
        CmbKV.setName("CmbKV"); // NOI18N
        CmbKV.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                CmbKVKeyPressed(evt);
            }
        });
        FormInput.add(CmbKV);
        CmbKV.setBounds(130, 50, 90, 23);

        CmbInspirasi.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Cukup", "Kurang" }));
        CmbInspirasi.setName("CmbInspirasi"); // NOI18N
        CmbInspirasi.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                CmbInspirasiKeyPressed(evt);
            }
        });
        FormInput.add(CmbInspirasi);
        CmbInspirasi.setBounds(130, 90, 90, 23);

        CmbSudut.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Tajam", "Tumpul", "Tertutup Perselubungan" }));
        CmbSudut.setName("CmbSudut"); // NOI18N
        CmbSudut.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                CmbSudutKeyPressed(evt);
            }
        });
        FormInput.add(CmbSudut);
        CmbSudut.setBounds(950, 10, 120, 23);

        label46.setText("Tulang & Jaringan Lunak :");
        label46.setName("label46"); // NOI18N
        label46.setPreferredSize(new java.awt.Dimension(65, 23));
        FormInput.add(label46);
        label46.setBounds(0, 170, 130, 23);

        label24.setText("Shif to");
        label24.setName("label24"); // NOI18N
        label24.setPreferredSize(new java.awt.Dimension(75, 23));
        FormInput.add(label24);
        label24.setBounds(490, 10, 40, 23);

        ChklnShiftoTrakea.setBorder(null);
        ChklnShiftoTrakea.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        ChklnShiftoTrakea.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ChklnShiftoTrakea.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ChklnShiftoTrakea.setName("ChklnShiftoTrakea"); // NOI18N
        ChklnShiftoTrakea.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ChklnShiftoTrakeaItemStateChanged(evt);
            }
        });
        FormInput.add(ChklnShiftoTrakea);
        ChklnShiftoTrakea.setBounds(530, 10, 28, 23);

        ShiftoTrakea.setEditable(false);
        ShiftoTrakea.setName("ShiftoTrakea"); // NOI18N
        ShiftoTrakea.setPreferredSize(new java.awt.Dimension(207, 23));
        ShiftoTrakea.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                ShiftoTrakeaMouseMoved(evt);
            }
        });
        ShiftoTrakea.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                ShiftoTrakeaMouseExited(evt);
            }
        });
        ShiftoTrakea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ShiftoTrakeaKeyPressed(evt);
            }
        });
        FormInput.add(ShiftoTrakea);
        ShiftoTrakea.setBounds(560, 10, 190, 23);

        ChklnShiftoMediastinum.setBorder(null);
        ChklnShiftoMediastinum.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        ChklnShiftoMediastinum.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ChklnShiftoMediastinum.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ChklnShiftoMediastinum.setName("ChklnShiftoMediastinum"); // NOI18N
        ChklnShiftoMediastinum.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ChklnShiftoMediastinumItemStateChanged(evt);
            }
        });
        FormInput.add(ChklnShiftoMediastinum);
        ChklnShiftoMediastinum.setBounds(600, 50, 28, 23);

        label33.setText("Nomal");
        label33.setName("label33"); // NOI18N
        label33.setPreferredSize(new java.awt.Dimension(75, 23));
        FormInput.add(label33);
        label33.setBounds(330, 50, 40, 23);

        ChkNormalMediastinum.setBorder(null);
        ChkNormalMediastinum.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        ChkNormalMediastinum.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ChkNormalMediastinum.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ChkNormalMediastinum.setName("ChkNormalMediastinum"); // NOI18N
        ChkNormalMediastinum.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ChkNormalMediastinumItemStateChanged(evt);
            }
        });
        ChkNormalMediastinum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChkNormalMediastinumActionPerformed(evt);
            }
        });
        FormInput.add(ChkNormalMediastinum);
        ChkNormalMediastinum.setBounds(370, 50, 28, 23);

        label34.setText("Melebar");
        label34.setName("label34"); // NOI18N
        label34.setPreferredSize(new java.awt.Dimension(75, 23));
        FormInput.add(label34);
        label34.setBounds(400, 50, 60, 23);

        ChkMelebarMediastinum.setBorder(null);
        ChkMelebarMediastinum.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        ChkMelebarMediastinum.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ChkMelebarMediastinum.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ChkMelebarMediastinum.setName("ChkMelebarMediastinum"); // NOI18N
        ChkMelebarMediastinum.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ChkMelebarMediastinumItemStateChanged(evt);
            }
        });
        ChkMelebarMediastinum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChkMelebarMediastinumActionPerformed(evt);
            }
        });
        FormInput.add(ChkMelebarMediastinum);
        ChkMelebarMediastinum.setBounds(460, 50, 28, 23);

        label25.setText("Shif to");
        label25.setName("label25"); // NOI18N
        label25.setPreferredSize(new java.awt.Dimension(75, 23));
        FormInput.add(label25);
        label25.setBounds(560, 50, 40, 23);

        ShiftoMediastinum.setEditable(false);
        ShiftoMediastinum.setName("ShiftoMediastinum"); // NOI18N
        ShiftoMediastinum.setPreferredSize(new java.awt.Dimension(207, 23));
        ShiftoMediastinum.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                ShiftoMediastinumMouseMoved(evt);
            }
        });
        ShiftoMediastinum.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                ShiftoMediastinumMouseExited(evt);
            }
        });
        ShiftoMediastinum.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ShiftoMediastinumKeyPressed(evt);
            }
        });
        FormInput.add(ShiftoMediastinum);
        ShiftoMediastinum.setBounds(630, 50, 190, 23);

        label35.setText("Massa");
        label35.setName("label35"); // NOI18N
        label35.setPreferredSize(new java.awt.Dimension(75, 23));
        FormInput.add(label35);
        label35.setBounds(490, 50, 40, 23);

        ChkMassaMediastinum.setBorder(null);
        ChkMassaMediastinum.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        ChkMassaMediastinum.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ChkMassaMediastinum.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ChkMassaMediastinum.setName("ChkMassaMediastinum"); // NOI18N
        ChkMassaMediastinum.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ChkMassaMediastinumItemStateChanged(evt);
            }
        });
        ChkMassaMediastinum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChkMassaMediastinumActionPerformed(evt);
            }
        });
        FormInput.add(ChkMassaMediastinum);
        ChkMassaMediastinum.setBounds(530, 50, 28, 23);

        label37.setText("Nomal");
        label37.setName("label37"); // NOI18N
        label37.setPreferredSize(new java.awt.Dimension(75, 23));
        FormInput.add(label37);
        label37.setBounds(330, 90, 40, 23);

        ChkNormalJantung.setBorder(null);
        ChkNormalJantung.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        ChkNormalJantung.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ChkNormalJantung.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ChkNormalJantung.setName("ChkNormalJantung"); // NOI18N
        ChkNormalJantung.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ChkNormalJantungItemStateChanged(evt);
            }
        });
        ChkNormalJantung.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChkNormalJantungActionPerformed(evt);
            }
        });
        FormInput.add(ChkNormalJantung);
        ChkNormalJantung.setBounds(370, 90, 28, 23);

        label39.setText("Cardiomegaly");
        label39.setName("label39"); // NOI18N
        label39.setPreferredSize(new java.awt.Dimension(75, 23));
        FormInput.add(label39);
        label39.setBounds(400, 90, 70, 23);

        ChkCardiomegalyJantung.setBorder(null);
        ChkCardiomegalyJantung.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        ChkCardiomegalyJantung.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ChkCardiomegalyJantung.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ChkCardiomegalyJantung.setName("ChkCardiomegalyJantung"); // NOI18N
        ChkCardiomegalyJantung.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ChkCardiomegalyJantungItemStateChanged(evt);
            }
        });
        ChkCardiomegalyJantung.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChkCardiomegalyJantungActionPerformed(evt);
            }
        });
        FormInput.add(ChkCardiomegalyJantung);
        ChkCardiomegalyJantung.setBounds(460, 90, 28, 23);

        label43.setText("Tear Drop");
        label43.setName("label43"); // NOI18N
        label43.setPreferredSize(new java.awt.Dimension(75, 23));
        FormInput.add(label43);
        label43.setBounds(490, 90, 50, 23);

        ChkTeardropJantung.setBorder(null);
        ChkTeardropJantung.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        ChkTeardropJantung.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ChkTeardropJantung.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ChkTeardropJantung.setName("ChkTeardropJantung"); // NOI18N
        ChkTeardropJantung.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ChkTeardropJantungItemStateChanged(evt);
            }
        });
        ChkTeardropJantung.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChkTeardropJantungActionPerformed(evt);
            }
        });
        FormInput.add(ChkTeardropJantung);
        ChkTeardropJantung.setBounds(530, 90, 28, 23);

        label28.setText("Shif to");
        label28.setName("label28"); // NOI18N
        label28.setPreferredSize(new java.awt.Dimension(75, 23));
        FormInput.add(label28);
        label28.setBounds(560, 90, 40, 23);

        ChklnShiftoJantung.setBorder(null);
        ChklnShiftoJantung.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        ChklnShiftoJantung.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ChklnShiftoJantung.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ChklnShiftoJantung.setName("ChklnShiftoJantung"); // NOI18N
        ChklnShiftoJantung.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ChklnShiftoJantungItemStateChanged(evt);
            }
        });
        FormInput.add(ChklnShiftoJantung);
        ChklnShiftoJantung.setBounds(600, 90, 28, 23);

        ShiftoJantung.setEditable(false);
        ShiftoJantung.setName("ShiftoJantung"); // NOI18N
        ShiftoJantung.setPreferredSize(new java.awt.Dimension(207, 23));
        ShiftoJantung.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                ShiftoJantungMouseMoved(evt);
            }
        });
        ShiftoJantung.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                ShiftoJantungMouseExited(evt);
            }
        });
        ShiftoJantung.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ShiftoJantungKeyPressed(evt);
            }
        });
        FormInput.add(ShiftoJantung);
        ShiftoJantung.setBounds(630, 90, 190, 23);

        label44.setText("Nomal");
        label44.setName("label44"); // NOI18N
        label44.setPreferredSize(new java.awt.Dimension(75, 23));
        FormInput.add(label44);
        label44.setBounds(330, 130, 40, 23);

        ChkNormalDiafragma.setBorder(null);
        ChkNormalDiafragma.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        ChkNormalDiafragma.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ChkNormalDiafragma.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ChkNormalDiafragma.setName("ChkNormalDiafragma"); // NOI18N
        ChkNormalDiafragma.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ChkNormalDiafragmaItemStateChanged(evt);
            }
        });
        ChkNormalDiafragma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChkNormalDiafragmaActionPerformed(evt);
            }
        });
        FormInput.add(ChkNormalDiafragma);
        ChkNormalDiafragma.setBounds(370, 130, 28, 23);

        label47.setText("Mendatar");
        label47.setName("label47"); // NOI18N
        label47.setPreferredSize(new java.awt.Dimension(75, 23));
        FormInput.add(label47);
        label47.setBounds(400, 130, 60, 23);

        ChkMendatarDiafragma.setBorder(null);
        ChkMendatarDiafragma.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        ChkMendatarDiafragma.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ChkMendatarDiafragma.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ChkMendatarDiafragma.setName("ChkMendatarDiafragma"); // NOI18N
        ChkMendatarDiafragma.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ChkMendatarDiafragmaItemStateChanged(evt);
            }
        });
        ChkMendatarDiafragma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChkMendatarDiafragmaActionPerformed(evt);
            }
        });
        FormInput.add(ChkMendatarDiafragma);
        ChkMendatarDiafragma.setBounds(460, 130, 28, 23);

        label48.setText("Tenting");
        label48.setName("label48"); // NOI18N
        label48.setPreferredSize(new java.awt.Dimension(75, 23));
        FormInput.add(label48);
        label48.setBounds(490, 130, 40, 23);

        ChkTentingDiafragma.setBorder(null);
        ChkTentingDiafragma.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        ChkTentingDiafragma.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ChkTentingDiafragma.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ChkTentingDiafragma.setName("ChkTentingDiafragma"); // NOI18N
        ChkTentingDiafragma.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ChkTentingDiafragmaItemStateChanged(evt);
            }
        });
        ChkTentingDiafragma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChkTentingDiafragmaActionPerformed(evt);
            }
        });
        FormInput.add(ChkTentingDiafragma);
        ChkTentingDiafragma.setBounds(530, 130, 28, 23);

        label29.setText("Lainnya");
        label29.setName("label29"); // NOI18N
        label29.setPreferredSize(new java.awt.Dimension(75, 23));
        FormInput.add(label29);
        label29.setBounds(560, 130, 40, 23);

        ChklnDiafragma.setBorder(null);
        ChklnDiafragma.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        ChklnDiafragma.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ChklnDiafragma.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ChklnDiafragma.setName("ChklnDiafragma"); // NOI18N
        ChklnDiafragma.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ChklnDiafragmaItemStateChanged(evt);
            }
        });
        FormInput.add(ChklnDiafragma);
        ChklnDiafragma.setBounds(600, 130, 28, 23);

        LainnyaDiagfragma.setEditable(false);
        LainnyaDiagfragma.setName("LainnyaDiagfragma"); // NOI18N
        LainnyaDiagfragma.setPreferredSize(new java.awt.Dimension(207, 23));
        LainnyaDiagfragma.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                LainnyaDiagfragmaMouseMoved(evt);
            }
        });
        LainnyaDiagfragma.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                LainnyaDiagfragmaMouseExited(evt);
            }
        });
        LainnyaDiagfragma.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                LainnyaDiagfragmaKeyPressed(evt);
            }
        });
        FormInput.add(LainnyaDiagfragma);
        LainnyaDiagfragma.setBounds(630, 130, 190, 23);

        label49.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        label49.setText("Kesan :");
        label49.setName("label49"); // NOI18N
        label49.setPreferredSize(new java.awt.Dimension(65, 23));
        FormInput.add(label49);
        label49.setBounds(840, 80, 50, 23);

        CmbSimetris1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Ya", "Tidak" }));
        CmbSimetris1.setName("CmbSimetris1"); // NOI18N
        CmbSimetris1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                CmbSimetris1KeyPressed(evt);
            }
        });
        FormInput.add(CmbSimetris1);
        CmbSimetris1.setBounds(130, 130, 90, 23);

        label45.setText("Parenkin Paru :");
        label45.setName("label45"); // NOI18N
        label45.setPreferredSize(new java.awt.Dimension(65, 23));
        FormInput.add(label45);
        label45.setBounds(830, 50, 120, 23);

        CmbParenkin.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Infiltrat", "Fibroinfiltrat", "Nodul", "Opasitas Homogen" }));
        CmbParenkin.setName("CmbParenkin"); // NOI18N
        CmbParenkin.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                CmbParenkinKeyPressed(evt);
            }
        });
        FormInput.add(CmbParenkin);
        CmbParenkin.setBounds(950, 50, 120, 23);

        label50.setText("Jantung :");
        label50.setName("label50"); // NOI18N
        label50.setPreferredSize(new java.awt.Dimension(65, 23));
        FormInput.add(label50);
        label50.setBounds(240, 90, 90, 23);

        PanelInput.add(FormInput, java.awt.BorderLayout.CENTER);

        ChkInput.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/143.png"))); // NOI18N
        ChkInput.setMnemonic('I');
        ChkInput.setText(".: Input Data");
        ChkInput.setToolTipText("Alt+I");
        ChkInput.setBorderPainted(true);
        ChkInput.setBorderPaintedFlat(true);
        ChkInput.setFocusable(false);
        ChkInput.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        ChkInput.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        ChkInput.setName("ChkInput"); // NOI18N
        ChkInput.setPreferredSize(new java.awt.Dimension(192, 20));
        ChkInput.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/143.png"))); // NOI18N
        ChkInput.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/145.png"))); // NOI18N
        ChkInput.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/145.png"))); // NOI18N
        ChkInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChkInputActionPerformed(evt);
            }
        });
        PanelInput.add(ChkInput, java.awt.BorderLayout.PAGE_END);

        internalFrame1.add(PanelInput, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(internalFrame1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void TCariKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TCariKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            BtnCariActionPerformed(null);
        }else if(evt.getKeyCode()==KeyEvent.VK_PAGE_DOWN){
            BtnCari.requestFocus();
        }else if(evt.getKeyCode()==KeyEvent.VK_PAGE_UP){
            BtnKeluar.requestFocus();
        }else if(evt.getKeyCode()==KeyEvent.VK_UP){
            tbDokter.requestFocus();
        }
}//GEN-LAST:event_TCariKeyPressed

    private void BtnCariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnCariActionPerformed
        tampil();
}//GEN-LAST:event_BtnCariActionPerformed

    private void BtnCariKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BtnCariKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_SPACE){
            BtnCariActionPerformed(null);
        }else{
            Valid.pindah(evt, TCari, BtnKeluar);
        }
}//GEN-LAST:event_BtnCariKeyPressed

    private void tbDokterMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbDokterMouseClicked
        if(tabMode.getRowCount()!=0){
            try {
                getData();
            } catch (java.lang.NullPointerException e) {
            }
        }
}//GEN-LAST:event_tbDokterMouseClicked

    private void tbDokterKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbDokterKeyPressed
        if(tabMode.getRowCount()!=0){
            if((evt.getKeyCode()==KeyEvent.VK_ENTER)||(evt.getKeyCode()==KeyEvent.VK_UP)||(evt.getKeyCode()==KeyEvent.VK_DOWN)){
                try {
                    getData();
                } catch (java.lang.NullPointerException e) {
                }
            }
        }
}//GEN-LAST:event_tbDokterKeyPressed

    private void BtnHapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnHapusActionPerformed
        if(TNoRw.getText().trim().equals("")){
            JOptionPane.showMessageDialog(null,"Maaf, Pilih dulu data yang akan Anda hapus dengan menklik data pada tabel...!!!");
            tbDokter.requestFocus();
        }else{
            Valid.hapusTable(tabMode,TNoRw,"bacaan_thorax_tb","no_rawat");
            tampil();
            emptTeks();
        }
}//GEN-LAST:event_BtnHapusActionPerformed

    private void BtnHapusKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BtnHapusKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_SPACE){
            BtnHapusActionPerformed(null);
        }else{
            Valid.pindah(evt, BtnBatal, BtnKeluar);
        }
}//GEN-LAST:event_BtnHapusKeyPressed

    private void BtnKeluarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnKeluarActionPerformed
            dispose();  
}//GEN-LAST:event_BtnKeluarActionPerformed

    private void BtnKeluarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BtnKeluarKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_SPACE){            
            dispose();              
        }else{Valid.pindah(evt,BtnHapus,TCari);}
}//GEN-LAST:event_BtnKeluarKeyPressed

    private void BtnSimpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnSimpanActionPerformed
        if(Kesimpulan.getText().trim().equals("")){
            Valid.textKosong(Kesimpulan,"kesan/Bacaan");
        }else if(TNoRw.getText().trim().equals("")||TPasien.getText().trim().equals("") ){
            Valid.textKosong(TNoRw,"No. Rawat & Pasien");
        }else{
                    if(ChkNormalTulang.isSelected()==true){
                      tulang="Normal";
                    }else if(ChklnTulang.isSelected()==true){
                      tulang=LnTulang.getText();
                    } 
                    if(ChkNormalTrakea.isSelected()==true){
                        trakea="Normal";
                    }else if(ChkMeyempitTrakea.isSelected()==true){
                        trakea="Menyempit";
                    }else if(ChklnShiftoTrakea.isSelected()==true){
                        trakea=ShiftoTrakea.getText();
                    } 
                    if(ChkNormalMediastinum.isSelected()==true){
                      mediastinum="Normal";
                    }else if(ChkMelebarMediastinum.isSelected()==true){
                      mediastinum="Melebar";
                    }else if(ChkMassaMediastinum.isSelected()==true){
                      mediastinum="Massa";
                    }else if(ChklnShiftoMediastinum.isSelected()==true){
                      mediastinum=ShiftoMediastinum.getText();
                    }            
                    if(ChkNormalJantung.isSelected()==true){
                      jantung="Normal";
                    }else if(ChkCardiomegalyJantung.isSelected()==true){
                      jantung="Cardiomegaly";
                    }else if(ChkTeardropJantung.isSelected()==true){
                      jantung="Tear Drop";
                    }else if(ChklnShiftoJantung.isSelected()==true){
                      jantung=ShiftoJantung.getText();
                    } 
                    if(ChkNormalDiafragma.isSelected()==true){
                      diafragma="Normal";
                    }else if(ChkMendatarDiafragma.isSelected()==true){
                      diafragma="Mendatar";
                    }else if(ChkTentingDiafragma.isSelected()==true){
                      diafragma="Tenting";
                    }else if(ChklnDiafragma.isSelected()==true){
                      diafragma=LainnyaDiagfragma.getText();
                    }
                    Sequel.menyimpan("bacaan_thorax_tb","?,?,?,?,?,?,?,?,?,?,?,?,?,?,?","Bacaan",15,new String[]{
                        TNoRw.getText(),Valid.SetTgl(DTPTanggal.getSelectedItem()+""),CmbPosisi.getSelectedItem().toString(),CmbKV.getSelectedItem().toString(),CmbInspirasi.getSelectedItem().toString(),CmbSimetris1.getSelectedItem().toString(),tulang,trakea,mediastinum,jantung,diafragma,CmbSudut.getSelectedItem().toString(),CmbParenkin.getSelectedItem().toString(),Kesimpulan.getText(),status
                    });
                    tampil();
                    emptTeks();
            }
        
}//GEN-LAST:event_BtnSimpanActionPerformed

    private void BtnSimpanKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BtnSimpanKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_SPACE){
            BtnSimpanActionPerformed(null);
        }else{
            Valid.pindah(evt,LnTulang,BtnBatal);
        }
}//GEN-LAST:event_BtnSimpanKeyPressed

    private void BtnBatalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnBatalActionPerformed
       if(Kesimpulan.getText().trim().equals("")){
            Valid.textKosong(Kesimpulan,"kesan/Bacaan");
        }else if(TNoRw.getText().trim().equals("")||TPasien.getText().trim().equals("") ){
            Valid.textKosong(TNoRw,"No. Rawat & Pasien");
        }else{
                    if(ChkNormalTulang.isSelected()==true){
                      tulang="Normal";
                    }else if(ChklnTulang.isSelected()==true){
                      tulang=LnTulang.getText();
                    } 
                    if(ChkNormalTrakea.isSelected()==true){
                        trakea="Normal";
                    }else if(ChkMeyempitTrakea.isSelected()==true){
                        trakea="Menyempit";
                    }else if(ChklnShiftoTrakea.isSelected()==true){
                        trakea=ShiftoTrakea.getText();
                    } 
                    if(ChkNormalMediastinum.isSelected()==true){
                      mediastinum="Normal";
                    }else if(ChkMelebarMediastinum.isSelected()==true){
                      mediastinum="Melebar";
                    }else if(ChkMassaMediastinum.isSelected()==true){
                      mediastinum="Massa";
                    }else if(ChklnShiftoMediastinum.isSelected()==true){
                      mediastinum=ShiftoMediastinum.getText();
                    }            
                    if(ChkNormalJantung.isSelected()==true){
                      jantung="Normal";
                    }else if(ChkCardiomegalyJantung.isSelected()==true){
                      jantung="Cardiomegaly";
                    }else if(ChkTeardropJantung.isSelected()==true){
                      jantung="Tear Drop";
                    }else if(ChklnShiftoJantung.isSelected()==true){
                      jantung=ShiftoJantung.getText();
                    } 
                    if(ChkNormalDiafragma.isSelected()==true){
                      diafragma="Normal";
                    }else if(ChkMendatarDiafragma.isSelected()==true){
                      diafragma="Mendatar";
                    }else if(ChkTentingDiafragma.isSelected()==true){
                      diafragma="Tenting";
                    }else if(ChklnDiafragma.isSelected()==true){
                      diafragma=LainnyaDiagfragma.getText();
                    }
                   Sequel.mengedit("bacaan_thorax_tb","no_rawat=? and tgl_kunjungan=?","posisi=?,kv=?,inspirasi=?,simetris=?,tulang=?,trakea=?,mediastinum=?,jantung=?,diafragma=?,sudut=?,parenkim=?,kesan=?",14,new String[]{
                       CmbPosisi.getSelectedItem().toString(),CmbKV.getSelectedItem().toString(),CmbInspirasi.getSelectedItem().toString(),CmbSimetris1.getSelectedItem().toString(),tulang,trakea,mediastinum,jantung,diafragma,CmbSudut.getSelectedItem().toString(),CmbParenkin.getSelectedItem().toString(),Kesimpulan.getText(), tbDokter.getValueAt(tbDokter.getSelectedRow(),0).toString(),Valid.SetTgl(DTPTanggal.getSelectedItem()+""),
                    });
                    tampil();
                    emptTeks();
            }
}//GEN-LAST:event_BtnBatalActionPerformed

    private void BtnBatalKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BtnBatalKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_SPACE){
            emptTeks();
        }else{Valid.pindah(evt, BtnSimpan, BtnHapus);}
}//GEN-LAST:event_BtnBatalKeyPressed

    private void LnTulangKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_LnTulangKeyPressed
         Valid.pindah(evt,CmbSimetris1,BtnSimpan);
    }//GEN-LAST:event_LnTulangKeyPressed
/*
private void KdKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TKdKeyPressed
    Valid.pindah(evt,BtnCari,Nm);
}//GEN-LAST:event_TKdKeyPressed
*/

    private void LnTulangMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LnTulangMouseExited

    }//GEN-LAST:event_LnTulangMouseExited

    private void LnTulangMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LnTulangMouseMoved

    }//GEN-LAST:event_LnTulangMouseMoved

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        tampil();
    }//GEN-LAST:event_formWindowOpened

    private void ChkNormalTulangItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ChkNormalTulangItemStateChanged
        if(ChkNormalTulang.isSelected()==true){
            ChklnTulang.setVisible(false);
        }else{
            ChklnTulang.setVisible(true);
        }
    }//GEN-LAST:event_ChkNormalTulangItemStateChanged

    private void ChklnTulangItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ChklnTulangItemStateChanged
     if(ChklnTulang.isSelected()==true){
            LnTulang.setEditable(true);
            ChkNormalTulang.setVisible(false);
        }else{
             LnTulang.setEditable(false);
             ChkNormalTulang.setVisible(true);
        }
    }//GEN-LAST:event_ChklnTulangItemStateChanged

    private void ChkNormalTrakeaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ChkNormalTrakeaItemStateChanged
        if(ChkNormalTrakea.isSelected()==true){
            ChkMeyempitTrakea.setVisible(false);
            ChklnShiftoTrakea.setVisible(false);
        }else{
           ChkMeyempitTrakea.setVisible(true);
            ChklnShiftoTrakea.setVisible(true);
        }
    }//GEN-LAST:event_ChkNormalTrakeaItemStateChanged

    private void ChkNormalTrakeaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChkNormalTrakeaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ChkNormalTrakeaActionPerformed

    private void ChkMeyempitTrakeaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ChkMeyempitTrakeaItemStateChanged
        if(ChkMeyempitTrakea.isSelected()==true){
            ChkNormalTrakea.setVisible(false);
            ChklnShiftoTrakea.setVisible(false);
        }else{
            ChkNormalTrakea.setVisible(true);
            ChklnShiftoTrakea.setVisible(true);
        }
    }//GEN-LAST:event_ChkMeyempitTrakeaItemStateChanged

    private void ChkMeyempitTrakeaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChkMeyempitTrakeaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ChkMeyempitTrakeaActionPerformed

    private void CmbPosisiKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_CmbPosisiKeyPressed
        Valid.pindah(evt,TNoRw,CmbKV);
    }//GEN-LAST:event_CmbPosisiKeyPressed

    private void ChkInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChkInputActionPerformed
        isForm();
    }//GEN-LAST:event_ChkInputActionPerformed

    private void TNoRwKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TNoRwKeyPressed

    }//GEN-LAST:event_TNoRwKeyPressed

    private void DTPTanggalItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_DTPTanggalItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_DTPTanggalItemStateChanged

    private void DTPTanggalKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_DTPTanggalKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_DTPTanggalKeyPressed

    private void TNoRmKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TNoRmKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_TNoRmKeyPressed

    private void KesimpulanKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_KesimpulanKeyPressed
        Valid.pindah2(evt,DTPTanggal,BtnSimpan);
    }//GEN-LAST:event_KesimpulanKeyPressed

    private void CmbKVKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_CmbKVKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_CmbKVKeyPressed

    private void CmbInspirasiKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_CmbInspirasiKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_CmbInspirasiKeyPressed

    private void CmbSudutKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_CmbSudutKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_CmbSudutKeyPressed

    private void ChklnShiftoTrakeaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ChklnShiftoTrakeaItemStateChanged
       if(ChklnShiftoTrakea.isSelected()==true){
            ShiftoTrakea.setEditable(true);
            ChkNormalTrakea.setVisible(false);
            ChkMeyempitTrakea.setVisible(false);
        }else{
            ShiftoTrakea.setEditable(false);
            ChkNormalTrakea.setVisible(true);
            ChkMeyempitTrakea.setVisible(true);
        }
    }//GEN-LAST:event_ChklnShiftoTrakeaItemStateChanged

    private void ShiftoTrakeaMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ShiftoTrakeaMouseMoved
        // TODO add your handling code here:
    }//GEN-LAST:event_ShiftoTrakeaMouseMoved

    private void ShiftoTrakeaMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ShiftoTrakeaMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_ShiftoTrakeaMouseExited

    private void ShiftoTrakeaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ShiftoTrakeaKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_ShiftoTrakeaKeyPressed

    private void ChklnShiftoMediastinumItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ChklnShiftoMediastinumItemStateChanged
      if(ChklnShiftoMediastinum.isSelected()==true){
            ShiftoMediastinum.setEditable(true);
            ChkMelebarMediastinum.setVisible(false);
            ChkMassaMediastinum.setVisible(false);
            ChkNormalMediastinum.setVisible(false);
        }else{
            ShiftoMediastinum.setEditable(false);
            ChkMelebarMediastinum.setVisible(true);
            ChkMassaMediastinum.setVisible(true);
            ChkNormalMediastinum.setVisible(true);
        }
    }//GEN-LAST:event_ChklnShiftoMediastinumItemStateChanged

    private void ChkNormalMediastinumItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ChkNormalMediastinumItemStateChanged
         if(ChkNormalMediastinum.isSelected()==true){
            ChkMelebarMediastinum.setVisible(false);
            ChkMassaMediastinum.setVisible(false);
            ChklnShiftoMediastinum.setVisible(false);
        }else{
           ChkMelebarMediastinum.setVisible(true);
            ChkMassaMediastinum.setVisible(true);
            ChklnShiftoMediastinum.setVisible(true);
        }
    }//GEN-LAST:event_ChkNormalMediastinumItemStateChanged

    private void ChkNormalMediastinumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChkNormalMediastinumActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ChkNormalMediastinumActionPerformed

    private void ChkMelebarMediastinumItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ChkMelebarMediastinumItemStateChanged
      if(ChkMelebarMediastinum.isSelected()==true){
            ChkNormalMediastinum.setVisible(false);
            ChkMassaMediastinum.setVisible(false);
            ChklnShiftoMediastinum.setVisible(false);
        }else{
            ChkNormalMediastinum.setVisible(true);
            ChkMassaMediastinum.setVisible(true);
            ChklnShiftoMediastinum.setVisible(true);
        }
    }//GEN-LAST:event_ChkMelebarMediastinumItemStateChanged

    private void ChkMelebarMediastinumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChkMelebarMediastinumActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ChkMelebarMediastinumActionPerformed

    private void ShiftoMediastinumMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ShiftoMediastinumMouseMoved
        // TODO add your handling code here:
    }//GEN-LAST:event_ShiftoMediastinumMouseMoved

    private void ShiftoMediastinumMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ShiftoMediastinumMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_ShiftoMediastinumMouseExited

    private void ShiftoMediastinumKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ShiftoMediastinumKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_ShiftoMediastinumKeyPressed

    private void ChkMassaMediastinumItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ChkMassaMediastinumItemStateChanged
     if(ChkMassaMediastinum.isSelected()==true){
            ChkNormalMediastinum.setVisible(false);
            ChkMelebarMediastinum.setVisible(false);
            ChklnShiftoMediastinum.setVisible(false);
        }else{
            ChkNormalMediastinum.setVisible(true);
            ChkMelebarMediastinum.setVisible(true);
            ChklnShiftoMediastinum.setVisible(true);
        }
    }//GEN-LAST:event_ChkMassaMediastinumItemStateChanged

    private void ChkMassaMediastinumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChkMassaMediastinumActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ChkMassaMediastinumActionPerformed

    private void ChkNormalJantungItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ChkNormalJantungItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_ChkNormalJantungItemStateChanged

    private void ChkNormalJantungActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChkNormalJantungActionPerformed
        if(ChkNormalJantung.isSelected()==true){
            ChkCardiomegalyJantung.setVisible(false);
            ChkTeardropJantung.setVisible(false);
            ChklnShiftoJantung.setVisible(false);
        }else{
            ChkCardiomegalyJantung.setVisible(true);
            ChkTeardropJantung.setVisible(true);
            ChklnShiftoJantung.setVisible(true);
        }
    }//GEN-LAST:event_ChkNormalJantungActionPerformed

    private void ChkCardiomegalyJantungItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ChkCardiomegalyJantungItemStateChanged
      if(ChkCardiomegalyJantung.isSelected()==true){
            ChkNormalJantung.setVisible(false);
            ChkTeardropJantung.setVisible(false);
            ChklnShiftoJantung.setVisible(false);
        }else{
            ChkNormalJantung.setVisible(true);
            ChkTeardropJantung.setVisible(true);
            ChklnShiftoJantung.setVisible(true);
        }
    }//GEN-LAST:event_ChkCardiomegalyJantungItemStateChanged

    private void ChkCardiomegalyJantungActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChkCardiomegalyJantungActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ChkCardiomegalyJantungActionPerformed

    private void ChkTeardropJantungItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ChkTeardropJantungItemStateChanged
      if(ChkTeardropJantung.isSelected()==true){
            ChkNormalJantung.setVisible(false);
            ChkCardiomegalyJantung.setVisible(false);
            ChklnShiftoJantung.setVisible(false);
        }else{
           ChkNormalJantung.setVisible(true);
            ChkCardiomegalyJantung.setVisible(true);
            ChklnShiftoJantung.setVisible(true);
        }
    }//GEN-LAST:event_ChkTeardropJantungItemStateChanged

    private void ChkTeardropJantungActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChkTeardropJantungActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ChkTeardropJantungActionPerformed

    private void ChklnShiftoJantungItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ChklnShiftoJantungItemStateChanged
         if(ChklnShiftoJantung.isSelected()==true){
            ShiftoJantung.setEditable(true);
            ChkNormalJantung.setVisible(false);
            ChkCardiomegalyJantung.setVisible(false);
            ChkTeardropJantung.setVisible(false);
        }else{
            ShiftoJantung.setEditable(false);
            ChkNormalJantung.setVisible(true);
            ChkCardiomegalyJantung.setVisible(true);
            ChkTeardropJantung.setVisible(true);
        }
    }//GEN-LAST:event_ChklnShiftoJantungItemStateChanged

    private void ShiftoJantungMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ShiftoJantungMouseMoved
        // TODO add your handling code here:
    }//GEN-LAST:event_ShiftoJantungMouseMoved

    private void ShiftoJantungMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ShiftoJantungMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_ShiftoJantungMouseExited

    private void ShiftoJantungKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ShiftoJantungKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_ShiftoJantungKeyPressed

    private void ChkNormalDiafragmaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ChkNormalDiafragmaItemStateChanged
       if(ChkNormalDiafragma.isSelected()==true){
            ChkMendatarDiafragma.setVisible(false);
            ChkTentingDiafragma.setVisible(false);
            ChklnDiafragma.setVisible(false);
        }else{
            ChkMendatarDiafragma.setVisible(true);
            ChkTentingDiafragma.setVisible(true);
            ChklnDiafragma.setVisible(true);
        }
    }//GEN-LAST:event_ChkNormalDiafragmaItemStateChanged

    private void ChkNormalDiafragmaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChkNormalDiafragmaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ChkNormalDiafragmaActionPerformed

    private void ChkMendatarDiafragmaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ChkMendatarDiafragmaItemStateChanged
       if(ChkMendatarDiafragma.isSelected()==true){
            ChkNormalDiafragma.setVisible(false);
            ChkTentingDiafragma.setVisible(false);
            ChklnDiafragma.setVisible(false);
        }else{
            ChkNormalDiafragma.setVisible(true);
            ChkTentingDiafragma.setVisible(true);
            ChklnDiafragma.setVisible(true);
        }
    }//GEN-LAST:event_ChkMendatarDiafragmaItemStateChanged

    private void ChkMendatarDiafragmaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChkMendatarDiafragmaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ChkMendatarDiafragmaActionPerformed

    private void ChkTentingDiafragmaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ChkTentingDiafragmaItemStateChanged
         if(ChkTentingDiafragma.isSelected()==true){
            ChkNormalDiafragma.setVisible(false);
            ChkMendatarDiafragma.setVisible(false);
            ChklnDiafragma.setVisible(false);
        }else{
            ChkNormalDiafragma.setVisible(true);
            ChkMendatarDiafragma.setVisible(true);
            ChklnDiafragma.setVisible(true);
        }
    }//GEN-LAST:event_ChkTentingDiafragmaItemStateChanged

    private void ChkTentingDiafragmaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChkTentingDiafragmaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ChkTentingDiafragmaActionPerformed

    private void ChklnDiafragmaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ChklnDiafragmaItemStateChanged
        if(ChklnDiafragma.isSelected()==true){
            LainnyaDiagfragma.setEditable(true);
            ChkNormalDiafragma.setVisible(false);
            ChkMendatarDiafragma.setVisible(false);
            ChkTentingDiafragma.setVisible(false);
        }else{
            LainnyaDiagfragma.setEditable(false);
            ChkNormalDiafragma.setVisible(true);
            ChkMendatarDiafragma.setVisible(true);
            ChkTentingDiafragma.setVisible(true);
        }
    }//GEN-LAST:event_ChklnDiafragmaItemStateChanged

    private void LainnyaDiagfragmaMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LainnyaDiagfragmaMouseMoved
        // TODO add your handling code here:
    }//GEN-LAST:event_LainnyaDiagfragmaMouseMoved

    private void LainnyaDiagfragmaMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LainnyaDiagfragmaMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_LainnyaDiagfragmaMouseExited

    private void LainnyaDiagfragmaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_LainnyaDiagfragmaKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_LainnyaDiagfragmaKeyPressed

    private void CmbSimetris1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_CmbSimetris1KeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_CmbSimetris1KeyPressed

    private void CmbParenkinKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_CmbParenkinKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_CmbParenkinKeyPressed

    private void DTPCari1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_DTPCari1ItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_DTPCari1ItemStateChanged

    private void DTPCari1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_DTPCari1KeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_DTPCari1KeyPressed

    private void DTPCari2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_DTPCari2ItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_DTPCari2ItemStateChanged

    private void DTPCari2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_DTPCari2KeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_DTPCari2KeyPressed

    private void BtnPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnPrintActionPerformed
        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        Map<String, Object> param = new HashMap<>();
        param.put("namars",akses.getnamars());
        param.put("alamatrs",akses.getalamatrs());
        param.put("kotars",akses.getkabupatenrs());
        param.put("propinsirs",akses.getpropinsirs());
        param.put("kontakrs",akses.getkontakrs());
        param.put("emailrs",akses.getemailrs());
        param.put("norawat",TNoRw.getText());
        param.put("logo",Sequel.cariGambar("select logo from setting"));
        Valid.MyReport("rptBacaanThorax.jasper",param,"::[ Hasil Bacaan Foto Thorax ]::");
        this.setCursor(Cursor.getDefaultCursor());
    }//GEN-LAST:event_BtnPrintActionPerformed

    private void BtnPrintKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BtnPrintKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_BtnPrintKeyPressed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(() -> {
            DlgBacaanThoraxTB dialog = new DlgBacaanThoraxTB(new javax.swing.JFrame(), true);
            dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                    System.exit(0);
                }
            });
            dialog.setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private widget.Button BtnBatal;
    private widget.Button BtnCari;
    private widget.Button BtnHapus;
    private widget.Button BtnKeluar;
    private widget.Button BtnPrint;
    private widget.Button BtnSimpan;
    private widget.CekBox ChkCardiomegalyJantung;
    private widget.CekBox ChkInput;
    private widget.CekBox ChkMassaMediastinum;
    private widget.CekBox ChkMelebarMediastinum;
    private widget.CekBox ChkMendatarDiafragma;
    private widget.CekBox ChkMeyempitTrakea;
    private widget.CekBox ChkNormalDiafragma;
    private widget.CekBox ChkNormalJantung;
    private widget.CekBox ChkNormalMediastinum;
    private widget.CekBox ChkNormalTrakea;
    private widget.CekBox ChkNormalTulang;
    private widget.CekBox ChkTeardropJantung;
    private widget.CekBox ChkTentingDiafragma;
    private widget.CekBox ChklnDiafragma;
    private widget.CekBox ChklnShiftoJantung;
    private widget.CekBox ChklnShiftoMediastinum;
    private widget.CekBox ChklnShiftoTrakea;
    private widget.CekBox ChklnTulang;
    private widget.ComboBox CmbInspirasi;
    private widget.ComboBox CmbKV;
    private widget.ComboBox CmbParenkin;
    private widget.ComboBox CmbPosisi;
    private widget.ComboBox CmbSimetris1;
    private widget.ComboBox CmbSudut;
    private widget.Tanggal DTPCari1;
    private widget.Tanggal DTPCari2;
    private widget.Tanggal DTPTanggal;
    private widget.PanelBiasa FormInput;
    private widget.TextArea Kesimpulan;
    private widget.Label LCount;
    private widget.TextBox LainnyaDiagfragma;
    private widget.TextBox LnTulang;
    private javax.swing.JPanel PanelInput;
    private widget.TextBox ShiftoJantung;
    private widget.TextBox ShiftoMediastinum;
    private widget.TextBox ShiftoTrakea;
    private widget.TextBox TCari;
    private widget.TextBox TNoRm;
    private widget.TextBox TNoRw;
    private widget.TextBox TPasien;
    private widget.InternalFrame internalFrame1;
    private javax.swing.JPanel jPanel2;
    private widget.Label label10;
    private widget.Label label11;
    private widget.Label label12;
    private widget.Label label18;
    private widget.Label label19;
    private widget.Label label22;
    private widget.Label label24;
    private widget.Label label25;
    private widget.Label label26;
    private widget.Label label27;
    private widget.Label label28;
    private widget.Label label29;
    private widget.Label label30;
    private widget.Label label31;
    private widget.Label label32;
    private widget.Label label33;
    private widget.Label label34;
    private widget.Label label35;
    private widget.Label label36;
    private widget.Label label37;
    private widget.Label label38;
    private widget.Label label39;
    private widget.Label label40;
    private widget.Label label41;
    private widget.Label label42;
    private widget.Label label43;
    private widget.Label label44;
    private widget.Label label45;
    private widget.Label label46;
    private widget.Label label47;
    private widget.Label label48;
    private widget.Label label49;
    private widget.Label label50;
    private widget.Label label9;
    private widget.panelisi panelisi1;
    private widget.panelisi panelisi2;
    private widget.ScrollPane scrollPane1;
    private widget.ScrollPane scrollPane17;
    private widget.Table tbDokter;
    // End of variables declaration//GEN-END:variables

    private void tampil() {
        Valid.tabelKosong(tabMode);
        try{
            ps=koneksi.prepareStatement("SELECT btt.no_rawat,rp.no_rkm_medis,p.nm_pasien,CONCAT(rp.umurdaftar,' ',rp.sttsumur) as umur, p.jk,btt.tgl_kunjungan,btt.posisi,btt.kv,btt.inspirasi,btt.simetris,btt.tulang,btt.trakea,btt.mediastinum,btt.jantung,btt.diafragma,btt.sudut,btt.parenkim,btt.kesan,btt.status " +
                                        " FROM bacaan_thorax_tb btt INNER JOIN reg_periksa rp ON rp.no_rawat=btt.no_rawat INNER JOIN pasien p ON p.no_rkm_medis=rp.no_rkm_medis  " +
                                        " WHERE btt.no_rawat like ? and btt.tgl_kunjungan between ? and ? or " + 
                                        " rp.no_rkm_medis like ? and btt.tgl_kunjungan between ? and ? or " + 
                                        " p.nm_pasien like ? and btt.tgl_kunjungan between ? and ? or " + 
                                        " btt.status like ? and btt.tgl_kunjungan between ? and ? " + 
                                        " order by btt.tgl_kunjungan asc");
            try {
                ps.setString(1,"%"+TCari.getText().trim()+"%");
                ps.setString(2,Valid.SetTgl(DTPCari1.getSelectedItem()+""));
                ps.setString(3,Valid.SetTgl(DTPCari2.getSelectedItem()+""));
                ps.setString(4,"%"+TCari.getText().trim()+"%");
                ps.setString(5,Valid.SetTgl(DTPCari1.getSelectedItem()+""));
                ps.setString(6,Valid.SetTgl(DTPCari2.getSelectedItem()+""));
                ps.setString(7,"%"+TCari.getText().trim()+"%");
                ps.setString(8,Valid.SetTgl(DTPCari1.getSelectedItem()+""));
                ps.setString(9,Valid.SetTgl(DTPCari2.getSelectedItem()+""));
                ps.setString(10,"%"+TCari.getText().trim()+"%");
                ps.setString(11,Valid.SetTgl(DTPCari1.getSelectedItem()+""));
                ps.setString(12,Valid.SetTgl(DTPCari2.getSelectedItem()+""));
                rs=ps.executeQuery();
                i=1;
                while(rs.next()){
                    tabMode.addRow(new Object[]{rs.getString(1),
                                   rs.getString(2),
                                   rs.getString(3),
                                   rs.getString(4),
                                   rs.getString(5),
                                   rs.getString(6),
                                   rs.getString(7),
                                   rs.getString(8),
                                   rs.getString(9),
                                   rs.getString(10),
                                   rs.getString(11),
                                   rs.getString(12),
                                   rs.getString(13),
                                   rs.getString(14),
                                   rs.getString(15),
                                   rs.getString(16),
                                   rs.getString(17),
                                   rs.getString(18),
                                   rs.getString(19)
                    });
                    i++;
                }
            } catch (Exception e) {
                System.out.println(e);
            } finally{
                if(rs!=null){
                    rs.close();
                }
                if(ps!=null){
                    ps.close();
                }
            }
        }catch(Exception e){
            System.out.println("Notifikasi : "+e);
        }
        LCount.setText(""+tabMode.getRowCount());
    }

    public void emptTeks() {
        TNoRw.setText("");
        Kesimpulan.setText("");
        DTPTanggal.setDate(new Date());
        CmbPosisi.setSelectedItem(false);
        CmbKV.setSelectedItem(false);
        CmbInspirasi.setSelectedItem(false);
        CmbSimetris1.setSelectedItem(false);
        ChkNormalTulang.setSelected(false);
        ChklnTulang.setSelected(false);
        ChkNormalTrakea.setSelected(false);
        ChkMeyempitTrakea.setSelected(false);
        ChklnShiftoTrakea.setSelected(false);
        ChkNormalMediastinum.setSelected(false);
        ChkMelebarMediastinum.setSelected(false);
        ChkMassaMediastinum.setSelected(false);
        ChklnShiftoMediastinum.setSelected(false);
        ChkNormalJantung.setSelected(false);
        ChkCardiomegalyJantung.setSelected(false);
        ChkTeardropJantung.setSelected(false);
        ChklnShiftoJantung.setSelected(false);
        ChkNormalDiafragma.setSelected(false);
        ChkMendatarDiafragma.setSelected(false);
        ChkTentingDiafragma.setSelected(false);
        ChklnDiafragma.setSelected(false);
        LnTulang.setText("");
        ShiftoTrakea.setText("");
        ShiftoMediastinum.setText("");
        ShiftoJantung.setText("");
        LainnyaDiagfragma.setText("");
        CmbPosisi.setSelectedIndex(0);
        CmbKV.setSelectedIndex(0);
        CmbInspirasi.setSelectedIndex(0);
        CmbSimetris1.setSelectedIndex(0);
        CmbSudut.setSelectedIndex(0);
        CmbParenkin.setSelectedIndex(0);
        TPasien.setText("");
        Kesimpulan.setText("");
        

    }

    private void getData() {
        if(tbDokter.getSelectedRow()!= -1){
            TNoRw.setText(tbDokter.getValueAt(tbDokter.getSelectedRow(),0).toString());
            TNoRm.setText(tbDokter.getValueAt(tbDokter.getSelectedRow(),1).toString());
            TPasien.setText(tbDokter.getValueAt(tbDokter.getSelectedRow(),2).toString()+" ("+(tbDokter.getValueAt(tbDokter.getSelectedRow(),3).toString())+") ("+(tbDokter.getValueAt(tbDokter.getSelectedRow(),4).toString())+")");
            Valid.SetTgl(DTPTanggal,tbDokter.getValueAt(tbDokter.getSelectedRow(),5).toString());
            CmbPosisi.setSelectedItem(tbDokter.getValueAt(tbDokter.getSelectedRow(),6).toString());
            CmbKV.setSelectedItem(tbDokter.getValueAt(tbDokter.getSelectedRow(),7).toString());
            CmbInspirasi.setSelectedItem(tbDokter.getValueAt(tbDokter.getSelectedRow(),8).toString());
            CmbSimetris1.setSelectedItem(tbDokter.getValueAt(tbDokter.getSelectedRow(),9).toString());
            CmbSudut.setSelectedItem(tbDokter.getValueAt(tbDokter.getSelectedRow(),15).toString());
            CmbParenkin.setSelectedItem(tbDokter.getValueAt(tbDokter.getSelectedRow(),16).toString());
            Kesimpulan.setText(tbDokter.getValueAt(tbDokter.getSelectedRow(),17).toString());
            if(tbDokter.getValueAt(tbDokter.getSelectedRow(),10).toString().equals("Normal")){
                 ChkNormalTulang.setSelected(true);     
            }else{
                ChklnTulang.setSelected(true);
                LnTulang.setText(tbDokter.getValueAt(tbDokter.getSelectedRow(),10).toString());
            }
           
            if(tbDokter.getValueAt(tbDokter.getSelectedRow(),11).toString().equals("Normal")){
                ChkNormalTrakea.setSelected(true);
            }else if(tbDokter.getValueAt(tbDokter.getSelectedRow(),11).toString().equals("Menyempit")){
                ChkMeyempitTrakea.setSelected(true);     
            }else{
                ChklnShiftoTrakea.setSelected(true);
                ShiftoTrakea.setText(tbDokter.getValueAt(tbDokter.getSelectedRow(),11).toString());
            }
             if(tbDokter.getValueAt(tbDokter.getSelectedRow(),12).toString().equals("Normal")){
                ChkNormalMediastinum.setSelected(true); 
             }else if(tbDokter.getValueAt(tbDokter.getSelectedRow(),12).toString().equals("Melebar")){
                ChkMelebarMediastinum.setSelected(true);
             }else if(tbDokter.getValueAt(tbDokter.getSelectedRow(),12).toString().equals("Massa")){
                 ChkMassaMediastinum.setSelected(true);
             }else {
                ChklnShiftoMediastinum.setSelected(true);
                ShiftoMediastinum.setText(tbDokter.getValueAt(tbDokter.getSelectedRow(),12).toString());
             }

             if(tbDokter.getValueAt(tbDokter.getSelectedRow(),13).toString().equals("Normal")){
                  ChkNormalJantung.setSelected(true);
             }else if (tbDokter.getValueAt(tbDokter.getSelectedRow(),13).toString().equals("Cardiomegaly")){
                  ChkCardiomegalyJantung.setSelected(true);
             }else if (tbDokter.getValueAt(tbDokter.getSelectedRow(),13).toString().equals("Tear Drop")){
                  ChkTeardropJantung.setSelected(true);
             }else {
                ChklnShiftoJantung.setSelected(true);
               ShiftoJantung.setText(tbDokter.getValueAt(tbDokter.getSelectedRow(),13).toString());
             }
            
            if(tbDokter.getValueAt(tbDokter.getSelectedRow(),14).toString().equals("Normal")){
                ChkNormalDiafragma.setSelected(true);
            }else if (tbDokter.getValueAt(tbDokter.getSelectedRow(),14).toString().equals("Mendatar")){
                 ChkMendatarDiafragma.setSelected(true);
            }else if (tbDokter.getValueAt(tbDokter.getSelectedRow(),14).toString().equals("Tenting")){
                 ChkTentingDiafragma.setSelected(true);
            }else{
               ChklnDiafragma.setSelected(true);
               LainnyaDiagfragma.setText(tbDokter.getValueAt(tbDokter.getSelectedRow(),14).toString());
            }
            
//            if(!tbDokter.getValueAt(tbDokter.getSelectedRow(),14).toString().equals("Normal")||!tbDokter.getValueAt(tbDokter.getSelectedRow(),14).toString().equals("Mendatar")||!tbDokter.getValueAt(tbDokter.getSelectedRow(),14).toString().equals("Tenting")){
//                ChklnDiafragma.setSelected(true);
//                LainnyaDiagfragma.setText(tbDokter.getValueAt(tbDokter.getSelectedRow(),14).toString());
//            }else{
//                try {
//                 switch (tbDokter.getValueAt(tbDokter.getSelectedRow(),14).toString()) {
//                         case "Normal":
//                             ChkNormalDiafragma.setSelected(true);
//                             break;
//                         case "Mendatar":
//                             ChkMendatarDiafragma.setSelected(true);
//                             break;
//                         case "Tenting":
//                             ChkTentingDiafragma.setSelected(true);
//                             break;
//                     }
//                  } catch (Exception e) {
//                 }
//            }

        }   
    }

    public JTable getTable(){
        return tbDokter;
    }
    
    
    private void isForm(){
        if(ChkInput.isSelected()==true){
            ChkInput.setVisible(false);
            PanelInput.setPreferredSize(new Dimension(WIDTH,220));
            FormInput.setVisible(true);      
            ChkInput.setVisible(true);
        }else if(ChkInput.isSelected()==false){           
            ChkInput.setVisible(false);            
            PanelInput.setPreferredSize(new Dimension(WIDTH,20));
            FormInput.setVisible(false);      
            ChkInput.setVisible(true);
        }
    }    
    
    public void setNoRm(String norwt,String Status) {        
        TNoRw.setText(norwt);
        Sequel.cariIsi("select concat(pasien.nm_pasien,' (',reg_periksa.umurdaftar,' ',reg_periksa.sttsumur,')',' (',pasien.jk,')') from reg_periksa inner join pasien "+
                    " on reg_periksa.no_rkm_medis=pasien.no_rkm_medis where no_rawat=? ",TPasien,TNoRw.getText());
        Sequel.cariIsi("select no_rkm_medis from reg_periksa where no_rawat=? ",TNoRm,TNoRw.getText());
        status=Status;
        TCari.setText(norwt);
    }
 
}
